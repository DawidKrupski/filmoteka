{"mappings":"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","sources":["src/library.js","src/js/getMoviesById.js"],"sourcesContent":["import './js/getGenreList';\nimport './js/getMoviesById';\nimport './js/modalWindow';\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\nimport { imageExists, getMovieYear } from './exportFunctions';\n\nlet movieID = '';\nconst API_KEY = 'b942b8bf626a04f48b07153a95ee51a0';\nconst loader = document.querySelector('.loader');\nconst watchedBtn = document.querySelector('.watched-list-btn');\nconst queueBtn = document.querySelector('.queue-list-btn');\nconst main = document.querySelector('.main-box');\n\nconst getMoviesbyId = async movieID => {\n  loader.style.display = 'block';\n  try {\n    let API_URL = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(API_URL);\n    loader.style.display = 'none';\n\n    return response.data;\n  } catch (error) {\n    loader.style.display = 'none';\n    console.error(error);\n  }\n};\n\n//watched\n\nlet watchedMovies = [];\n\nasync function getWatchedMovies() {\n  queueBtn.removeAttribute('disabled');\n  main.innerHTML = '';\n\n  if (localStorage.getItem('added-to-watched') === null) {\n    Notify.info('There are no movies in your watched list!');\n  } else {\n    watchedMovies = JSON.parse(localStorage.getItem('added-to-watched'));\n\n    let watchedMoviesList = [];\n\n    for (let i = 0; i < watchedMovies.length; i++) {\n      let watchedMovieId = watchedMovies[i];\n\n      let watchedMoviesItem = await getMoviesbyId(watchedMovieId);\n\n      watchedMoviesList.push(watchedMoviesItem);\n    }\n    renderMovies(watchedMoviesList);\n  }\n  watchedBtn.setAttribute('disabled', true);\n}\n\nwatchedBtn.addEventListener('click', event => {\n  event.preventDefault();\n  getWatchedMovies();\n});\n\n//queue\n\nlet queuedMovies = [];\n\nasync function getQueuedMovies() {\n  watchedBtn.removeAttribute('disabled');\n  main.innerHTML = '';\n\n  if (localStorage.getItem('added-to-queue') === null) {\n    Notify.info('There are no movies in your queue!');\n  } else {\n    queuedMovies = JSON.parse(localStorage.getItem('added-to-queue'));\n    let queuedMoviesList = [];\n\n    for (let i = 0; i < queuedMovies.length; i++) {\n      let queuedMovieId = queuedMovies[i];\n\n      let queuedMoviesItem = await getMoviesbyId(queuedMovieId);\n      queuedMoviesList.push(queuedMoviesItem);\n    }\n\n    renderMovies(queuedMoviesList);\n  }\n\n  queueBtn.setAttribute('disabled', true);\n}\n\nqueueBtn.addEventListener('click', event => {\n  event.preventDefault();\n  getQueuedMovies();\n});\n\n//render movies\nfunction renderMovies(movies) {\n  const getSingleMoviesGenre = genres => {\n    let singleMovieGenres = '';\n    genres.map(elem => {\n      elem != genres[genres.length - 1]\n        ? (singleMovieGenres = singleMovieGenres + elem.name + ', ')\n        : (singleMovieGenres = singleMovieGenres + elem.name);\n    });\n    return singleMovieGenres;\n  };\n  const markup = movies\n    .map(movie => {\n      return `\n<div class=\"movie-card\">\n  <img class=\"movie-card__image\" alt=\"${movie.title} movie\"src=${imageExists(\n        'https://image.tmdb.org/t/p/w500',\n        movie.poster_path\n      )}>\n  <div class=\"movie-card__label\">\n    <p class=\"movie-card__title\">${movie.original_title}</p>\n    <div>\n    <span class=\"movie-card__genre-year\"> ${getSingleMoviesGenre(\n      movie.genres\n    )}  | ${getMovieYear(movie.release_date)}</span> \n    <span class=\"movie-card__vote\">${movie.vote_average.toFixed(1)}</span>\n    \n    </div>\n    <p class=\"movie-card__id\">${movie.id}</p> \n  </div>\n</div>\n`;\n    })\n    .join('');\n\n  main.innerHTML += markup;\n}\n//<p class=\"movie-card__genre-year\">${singleMovieGenres} | ${getMovieYear(\n//movie.release_date\n//)}</p>\n"],"names":["parcelRequire","$7pbsT","$c581f0284ec1c973$var$loader","document","querySelector","$c581f0284ec1c973$var$watchedBtn","$c581f0284ec1c973$var$queueBtn","$c581f0284ec1c973$var$main","$c581f0284ec1c973$var$getMoviesbyId","default","movieID","API_URL","response","error","style","display","concat","$dIxxU","get","_state","sent","data","console","$c581f0284ec1c973$var$watchedMovies","$c581f0284ec1c973$var$_getWatchedMovies","watchedMoviesList","i","watchedMovieId","watchedMoviesItem","removeAttribute","innerHTML","localStorage","getItem","$iU1Pc","Notify","info","JSON","parse","length","push","$c581f0284ec1c973$var$renderMovies","setAttribute","apply","this","arguments","addEventListener","event","preventDefault","$c581f0284ec1c973$var$getWatchedMovies","$c581f0284ec1c973$var$queuedMovies","$c581f0284ec1c973$var$_getQueuedMovies","queuedMoviesList","queuedMovieId","queuedMoviesItem","movies","markup","map","movie","title","$e4Itz","imageExists","poster_path","original_title","genres","singleMovieGenres","elem","name","getMovieYear","release_date","vote_average","toFixed","id","join","$c581f0284ec1c973$var$getQueuedMovies"],"version":3,"file":"library.5876d147.js.map"}